 Step 1: Create Project Structure
bash
Copy
Edit
mkdir flask-docker-app
cd flask-docker-app
Project Structure:
Copy
Edit
flask-docker-app/
│
├── app.py
├── requirements.txt
└── Dockerfile
📝 Step 2: Create a Simple Flask App
app.py

python
Copy
Edit
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "Hello, Docker World!"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
📦 Step 3: Create Requirements File
requirements.txt

ini
Copy
Edit
flask==2.2.5
🐳 Step 4: Write Dockerfile
Dockerfile

dockerfile
Copy
Edit
# Use official Python image
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Copy files to the container
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt

COPY . .

# Expose port
EXPOSE 5000

# Run the application
CMD ["python", "app.py"]
🔨 Step 5: Build the Docker Image
In your terminal (inside the project folder):

bash
Copy
Edit
docker build -t flask-docker-app .
🚀 Step 6: Run the Docker Container
bash
Copy
Edit
docker run -d -p 5000:5000 flask-docker-app
Now open your browser and go to http://localhost:5000. You should see:

Copy
Edit
Hello, Docker World!
🧼 Step 7: Stop and Remove the Container (optional)
To list running containers:

bash
Copy
Edit
docker ps
To stop the container:

bash
Copy
Edit
docker stop <container_id>
To remove the container:

bash
Copy
Edit
docker rm <container_id>
✅ Summary
You created a simple Flask app.

You containerized it with Docker.

You ran it inside a container and accessed it via browser.

Would you like to extend this by adding MongoDB/MySQL with Docker Compose, or deploy it to a cloud platform like AWS/GCP?








